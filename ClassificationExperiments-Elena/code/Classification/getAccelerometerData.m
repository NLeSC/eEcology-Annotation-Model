%% getAccelerometerData - getting data from the eEcology UvA DB
% Getting the accelerometer, GPS, speed etc. data from the DB
%
% -----------------------------------------------------------------------
% SYNTAX
% [data] = getAccelerometerData(connection, ...
%                               device, starttime, stoptime,...
%                               limited)
%
% INPUT
% connection - Database connection object
% device - device ID for which the data are to be  retrieved
% starttime and stoptime- define the time strip of interest.
%                         Strings of format 'yyy-mm-dd hh:mm:ss'
% limited - Use limited views or not. Defaults to false, not using limited views.
%
% OUPTPUT
% data - Struct with accelerometer measurements.
%
% EXAMPLE
% [data] = getAccelerometerData(connection,...
%                               '../data/eecologyqueries.mat', 'sql_gps_acc',...
%                                754, '2013-06-08 06:20:00', ...
%                                '2013-06-08 07:20:00', true)
%
% SEE ALSO
%
% REFERENCES

function [data] = getAccelerometerData(connection, ...
                                       device, starttime, stoptime,...
                                       limited)

sql_query_tpl = [
    'SELECT \n',...
    'device_info_serial AS device, \n',...
    'date_time, \n',...
    'index, \n',...
    'longitude AS long, \n',...
    'latitude AS lat, \n',...
    'altitude AS alt, \n',...
    '(x_acceleration-x_o)/x_s as x, \n',...
    '(y_acceleration-y_o)/y_s as y, \n',...
    '(z_acceleration-z_o)/z_s as z, \n',...
    'speed AS ispd, \n',...
    'tspd \n',...
    'FROM gps.uva_acceleration101\n',...
    'JOIN gps.uva_device USING (device_info_serial)\n',...
    'JOIN gps.uva_tracking_speed i USING (device_info_serial, date_time)\n',...
    'JOIN (\n',...
    '      SELECT device_info_serial, date_time, speed AS tspd\n',...
    '      FROM gps.get_uvagps_track_speed(%d, ''%s'', ''%s'')\n',...
    ') t USING (device_info_serial, date_time)\n',...
    'WHERE device_info_serial = %d \n',...
    'AND date_time BETWEEN ''%s'' AND ''%s'' \n',...
    'AND latitude IS NOT NULL AND userflag <> 1 \n',...
    'ORDER BY device_info_serial, date_time, index\n',...
];

if limited
    sql_query_tpl = [
        'SELECT \n',...
        'device_info_serial AS device, \n',...
        'date_time, \n',...
        'index, \n',...
        'longitude AS long, \n',...
        'latitude AS lat, \n',...
        'altitude AS alt, \n',...
        '(x_acceleration-x_o)/x_s as x, \n',...
        '(y_acceleration-y_o)/y_s as y, \n',...
        '(z_acceleration-z_o)/z_s as z, \n',...
        'speed AS ispd, \n',...
        'tspd \n',...
        'FROM gps.uva_acceleration_limited\n',...
        'JOIN gps.uva_device_limited USING (device_info_serial)\n',...
        'JOIN gps.uva_tracking_speed_limited i USING (device_info_serial, date_time)\n',...
        'JOIN (\n',...
        '      SELECT device_info_serial, date_time, speed AS tspd\n',...
        '      FROM gps.get_uvagps_track_speed(%d, ''%s'', ''%s'')\n',...
        ') t USING (device_info_serial, date_time)\n',...
        'WHERE device_info_serial = %d \n',...
        'AND date_time BETWEEN ''%s'' AND ''%s'' \n',...
        'AND latitude IS NOT NULL AND userflag <> 1 \n',...
        'ORDER BY device_info_serial, date_time, index\n',...
    ];
end

%% Generate/load query
sql_query = sprintf(sql_query_tpl, device, starttime, stoptime, device, starttime, stoptime);

% Run query
data = pg_fetch_struct(connection, sql_query);


